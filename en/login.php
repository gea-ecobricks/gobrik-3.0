<?php
// Turn on or off error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Start the session before any output
session_start();

// Check if user is logged in and session active
if (isset($_SESSION['buwana_id'])) {
    header('Location: dashboard.php');
    exit();
}

// Generate CSRF token if not already set
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// Set page variables
$lang = basename(dirname($_SERVER['SCRIPT_NAME']));
$version = '0.65';
$page = 'login';
$lastModified = date("Y-m-d\TH:i:s\Z", filemtime(__FILE__));

// Get the status, id (buwana_id), and key (credential_key) from URL
$status = isset($_GET['status']) ? filter_var($_GET['status'], FILTER_SANITIZE_STRING) : '';
$buwana_id = isset($_GET['id']) ? filter_var($_GET['id'], FILTER_SANITIZE_NUMBER_INT) : '';
$credential_key = ''; // Initialize $credential_key as empty
$first_name = '';  // Initialize the first_name variable

// Check if buwana_id is available and valid to fetch corresponding email and first_name from users_tb
//Note: to be updated when more credential options are available.
//Needs to also grab credential_type
if (!empty($buwana_id)) {
    require_once '../buwanaconn_env.php'; //sets up buwana_conn database connection

    // Prepare the query to fetch the email and first_name from users_tb
    $sql = "SELECT email, first_name FROM users_tb WHERE buwana_id = ?";

    if ($stmt = $buwana_conn->prepare($sql)) {
        // Bind the buwana_id parameter
        $stmt->bind_param("i", $buwana_id);

        // Execute the statement
        $stmt->execute();

        // Bind the result
        $stmt->bind_result($fetched_email, $fetched_first_name);

        // Fetch the result and overwrite the email and first_name if found
        if ($stmt->fetch()) {
            $credential_key = $fetched_email;  // Store the fetched email
            $first_name = $fetched_first_name;  // Store the fetched first_name
        }

        // Close the statement
        $stmt->close();
    }

    // Close the database connection
    $buwana_conn->close();
}

// Echo the HTML structure
echo '<!DOCTYPE html>
<html lang="' . htmlspecialchars($lang, ENT_QUOTES, 'UTF-8') . '">
<head>
<meta charset="UTF-8">
<title>Login</title>
';

// After fetching $first_name, $status, and $lang from the server
echo '<script>';
echo 'const status = "' . addslashes($status) . '";';
echo 'const lang = "' . addslashes($lang) . '";';
echo 'const firstName = "' . addslashes($first_name) . '";';
echo '</script>';

?>


<!-- Include necessary scripts and styles -->
<?php require_once ("../includes/login-inc.php");?>

<div class="splash-title-block"></div>
<div id="splash-bar"></div>

<!-- PAGE CONTENT -->
<div id="top-page-image" class="earth-community top-page-image"></div>

<div id="form-submission-box" class="landing-page-form">
    <div class="form-container">

     <!-- This is the welcome header and subtitle that are custom generated by the javascript depending on the status returned in the url

     Update to include translations and variations of the H4 tag-->

    <div style="text-align:center;width:100%;margin:auto;" >
        <h3 id="status-message">Login to your account</h3>
        <h4 id="sub-status-message">Please signin with your account credentials.</h4>
    </div>

    <!-- Form starts here -->
    <form id="login" method="post" action="login_process.php">
        <input type="hidden" name="csrf_token" value="<?php echo htmlspecialchars($_SESSION['csrf_token']); ?>">

        <div class="form-item">
            <div class="input-wrapper" style="position: relative;">
                <input type="text" id="credential_key" name="credential_key" required placeholder="Your e-mail..." value="<?php echo htmlspecialchars($credential_key); ?>">
                <span class="toggle-select" style="cursor: pointer; position: absolute; right: 10px; top: 50%; transform: translateY(-50%);">🔑</span>
                <div id="dropdown-menu" style="display: none; position: absolute; right: 10px; top: 100%; z-index: 1000; background: white; border: 1px solid #ccc; width: 150px; text-align: left;">
                    <div class="dropdown-item" value="Your email...">E-mail</div>
                    <div class="dropdown-item disabled" style="opacity: 0.5;">SMS</div>
                    <div class="dropdown-item disabled" style="opacity: 0.5;">Phone</div>
                    <div class="dropdown-item disabled" style="opacity: 0.5;">GEA Peer</div>
                </div>
            </div>
            <div id="no-buwana-email" data-lang-id="001-cant-find" class="form-field-error" style="display:none;margin-top: 0px;margin-bottom:-15px;">🤔 We can't find this credential in the database.</div>
        </div>

    <div class="form-item">
        <div class="password-wrapper" style="position: relative;">
            <div data-lang-id="005-password-field-placeholder">
                <input type="password" id="password" name="password" required placeholder="Your password...">
            </div>
            <span toggle="#password" class="toggle-password" style="cursor: pointer; position: absolute; right: 10px; top: 50%; transform: translateY(-50%);">🔒</span>
        </div>
        <div id="password-error" data-lang-id="002-password-is-wrong" class="form-field-error" style="display:none;margin-top: 0px;margin-bottom:-15px;">👉 Password is wrong.</div>

        <p class="form-caption" data-lang-id="003-forgot-your-password">Forgot your password? <a href="#" onclick="showPasswordReset('reset')" class="underline-link" datala-lang-id="000-reset-it">Reset it.</a></p>

            <div style="text-align:center;" data-lang-id="004-login-button">
                <input type="submit" style="text-align:center;margin-top:15px;width:30%; min-width: 175px;" id="submit-button" value="🌍 Login" class="submit-button buwana-login">
            </div>
        </form>

    </div>

</div>
    <div style="text-align:center;width:100%;margin:auto;margin-top:30px;margin-bottom:50px;">
        <p style="font-size:medium;" data-lang-id="000-no-account-yet">Don't have an account yet? <a href="signup.php">Signup!</a></p>
    </div>
</div>

</div>

<!-- FOOTER STARTS HERE -->
<?php require_once ("../footer-2024.php");?>

 <script>
        // Define the getStatusMessages function first
        function getStatusMessages(status, lang, firstName = '') {
            const messages = {
                loggedout: {
                    en: {
                        main: "You've been logged out.",
                        sub: `When you're ready${firstName ? ' ' + firstName : ''}, login again with your account credentials.`
                    },
                    fr: {
                        main: "Vous avez été déconnecté.",
                        sub: `Quand vous êtes prêt${firstName ? ' ' + firstName : ''}, reconnectez-vous avec vos identifiants.`
                    },
                    id: {
                        main: "Anda telah keluar.",
                        sub: `Saat Anda siap${firstName ? ' ' + firstName : ''}, login lagi dengan kredensial akun Anda.`
                    },
                    es: {
                        main: "Has cerrado tu sesión.",
                        sub: `Cuando estés listo${firstName ? ' ' + firstName : ''}, vuelve a iniciar sesión con tus credenciales.`
                    }
                },
                firsttime: {
                    en: {
                        main: "Your Buwana Account is Created! 🎉",
                        sub: `Now${firstName ? ' ' + firstName : ''}, please login again with your new account credentials.`
                    },
                    fr: {
                        main: "Votre compte Buwana est créé ! 🎉",
                        sub: `Maintenant${firstName ? ' ' + firstName : ''}, connectez-vous avec vos nouvelles identifiants.`
                    },
                    id: {
                        main: "Akun Buwana Anda sudah Dibuat! 🎉",
                        sub: `Sekarang${firstName ? ' ' + firstName : ''}, silakan masuk dengan kredensial baru Anda.`
                    },
                    es: {
                        main: "¡Tu cuenta de Buwana está creada! 🎉",
                        sub: `Ahora${firstName ? ' ' + firstName : ''}, por favor inicia sesión con tus nuevas credenciales.`
                    }
                },
                default: {
                    en: {
                        main: "Welcome back!",
                        sub: `${firstName ? firstName + ', ' : ''}please login again with your account credentials.`
                    },
                    fr: {
                        main: "Bon retour !",
                        sub: `${firstName ? firstName + ', ' : ''}veuillez vous reconnecter avec vos identifiants.`
                    },
                    id: {
                        main: "Selamat datang kembali!",
                        sub: `${firstName ? firstName + ', ' : ''}silakan masuk lagi dengan kredensial akun Anda.`
                    },
                    es: {
                        main: "¡Bienvenido de nuevo!",
                        sub: `${firstName ? firstName + ', ' : ''}por favor inicia sesión de nuevo con tus credenciales.`
                    }
                }
            };

            const selectedMessages = messages[status] && messages[status][lang]
                ? messages[status][lang]
                : messages.default[lang] || messages.default.en;

            return {
                main: selectedMessages.main,
                sub: selectedMessages.sub
            };
        }

        // Now call the function after defining it
        document.addEventListener("DOMContentLoaded", function() {
            // Assuming `status`, `lang`, and `firstName` are available in the global scope
            const status = 'loggedout'; // Example status
            const lang = 'en'; // Example lang
            const firstName = 'John'; // Example first name

            // Get the appropriate messages
            const { main, sub } = getStatusMessages(status, lang, firstName);

            // Update the HTML content inside the existing <h3> and <h4> elements
            document.getElementById('status-message').textContent = main;
            document.getElementById('sub-status-message').textContent = sub;
        });
    </script>

<script>





    // Function to extract the query parameters from the URL
    function getQueryParam(param) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
    }

    // Document ready event
    document.addEventListener('DOMContentLoaded', function() {
        // Get the values from the URL query parameters
        const status = getQueryParam('status') || ''; // status like 'loggedout', 'firsttime', etc.
        const lang = document.documentElement.lang || 'en'; // Get language from the <html> tag or default to 'en'
        const buwanaId = getQueryParam('id'); // buwana_id
        const credentialKey = getQueryParam('key'); // credential_key

        // Fetch and display the status message based on the status and language
        const message = getStatusMessage(status, lang);
        document.getElementById('status-message').textContent = message;

        // Fill the credential_key input field if present in the URL
        if (credentialKey) {
            document.getElementById('credential_key').value = credentialKey;
        }

        // You could also trigger other logic using `buwanaId` if necessary
        console.log("Buwana ID: " + buwanaId);
    });



document.addEventListener("DOMContentLoaded", function () {
    // Get the error type from the URL parameters (if present)
    const errorType = "<?php echo isset($_GET['status']) ? htmlspecialchars($_GET['status']) : ''; ?>";

    // Check if there is any errorType passed and handle accordingly
    if (errorType) {
        handleErrorResponse(errorType);
    }

    // Form submission validation
    document.getElementById('login').addEventListener('submit', function (event) {
        var credentialValue = document.getElementById('credential_key').value;
        var password = document.getElementById('password').value;

        // Simple form validation before submitting
        if (credentialValue === '' || password === '') {
            event.preventDefault();
            displayError('password-error'); // Show password error if fields are empty
        }
    });
});




// Consolidated function to handle error responses and show the appropriate error div
function handleErrorResponse(errorType) {
    // Hide both error divs initially
    document.getElementById('password-error').style.display = 'none';
    document.getElementById('no-buwana-email').style.display = 'none';

    // Show the appropriate error div based on the errorType
    if (errorType === 'invalid_password') {
        document.getElementById('password-error').style.display = 'block'; // Show password error
    } else if (errorType === 'invalid_user' || errorType === 'invalid_credential') {
        document.getElementById('no-buwana-email').style.display = 'block'; // Show email error for invalid user/credential
    }
}


/*Trigger the credentials menu from the key symbol in the credentials field.*/

document.addEventListener("DOMContentLoaded", function () {
    const toggleSelectIcon = document.querySelector('.toggle-select');
    const dropdownMenu = document.getElementById('dropdown-menu');
    const credentialKeyInput = document.getElementById('credential_key');
    const dropdownItems = dropdownMenu.querySelectorAll('.dropdown-item');

    // Toggle dropdown menu visibility on click
    toggleSelectIcon.addEventListener('click', function () {
        dropdownMenu.style.display = dropdownMenu.style.display === 'none' ? 'block' : 'none';
    });

    // Close dropdown if clicked outside
    document.addEventListener('click', function (e) {
        if (!toggleSelectIcon.contains(e.target) && !dropdownMenu.contains(e.target)) {
            dropdownMenu.style.display = 'none';
        }
    });

    // Handle dropdown item selection
    dropdownItems.forEach(function (item) {
        item.addEventListener('click', function () {
            if (!item.classList.contains('disabled')) {
                credentialKeyInput.value = item.textContent.trim();
                dropdownMenu.style.display = 'none';
            }
        });
    });
});


/* PASSWORD RESET MODAL  */
function showPasswordReset(type, lang = 'en', email = '') {
    const modal = document.getElementById('form-modal-message');
    const photobox = document.getElementById('modal-photo-box');
    const messageContainer = modal.querySelector('.modal-message');
    let content = '';
    photobox.style.display = 'none';

    switch (type) {
        case 'reset':
            let title, promptText, buttonText, errorText;

            switch (lang) {
                case 'fr':
                    title = "Réinitialiser le mot de passe";
                    promptText = "Entrez votre email pour réinitialiser votre mot de passe :";
                    buttonText = "Réinitialiser le mot de passe";
                    errorText = "🤔 Hmmm... nous ne trouvons aucun compte utilisant cet email !";
                    break;
                case 'es':
                    title = "Restablecer la contraseña";
                    promptText = "Ingrese su correo electrónico para restablecer su contraseña:";
                    buttonText = "Restablecer la contraseña";
                    errorText = "🤔 Hmmm... no podemos encontrar una cuenta que use este correo electrónico!";
                    break;
                case 'id':
                    title = "Atur Ulang Kata Sandi";
                    promptText = "Masukkan email Anda untuk mengatur ulang kata sandi Anda:";
                    buttonText = "Atur Ulang Kata Sandi";
                    errorText = "🤔 Hmmm... kami tidak dapat menemukan akun yang menggunakan email ini!";
                    break;
                default: // 'en'
                    title = "Reset Password";
                    promptText = "Enter your email to reset your password:";
                    buttonText = "Reset Password";
                    errorText = "🤔 Hmmm... we can't find an account that uses this email!";
                    break;
            }

            content = `
                <div style="text-align:center;width:100%;margin:auto;margin-top:10px;margin-bottom:10px;">
                    <h1>🔓</h1>
                </div>
                <div class="preview-title">${title}</div>
                <form id="resetPasswordForm" action="reset_password.php" method="POST">
                    <div class="preview-text" style="font-size:medium;">${promptText}</div>
                    <input type="email" name="email" required value="${email}">
                    <div style="text-align:center;width:100%;margin:auto;margin-top:10px;margin-bottom:10px;">
                        <div id="no-buwana-email" class="form-warning" style="display:none;margin-top:5px;margin-bottom:5px;" data-lang-id="010-no-buwana-email">${errorText}</div>
                        <button type="submit" class="submit-button enabled">${buttonText}</button>
                    </div>
                </form>
            `;
            break;

        default:
            content = '<p>Invalid term selected.</p>';
    }

    messageContainer.innerHTML = content;

    modal.style.display = 'flex';
    document.getElementById('page-content').classList.add('blurred');
    document.getElementById('footer-full').classList.add('blurred');
    document.body.classList.add('modal-open');
}

window.onload = function() {
    const urlParams = new URLSearchParams(window.location.search);


//Relevant still?  Needs revision for status update of page variables.

    // Check if the 'email_not_found' parameter exists in the URL
    if (urlParams.has('email_not_found')) {
        // Get the email from the URL parameters
        const email = urlParams.get('email') || '';

        // Get the language from the backend (PHP) or default to 'en'
        const lang = '<?php echo $lang; ?>'; // Make sure this is echoed from your PHP

        // Show the reset modal with the pre-filled email and appropriate language
        showPasswordReset('reset', lang, email);

        // Wait for the modal to load, then display the "email not found" error message
        setTimeout(() => {
            const noBuwanaEmail = document.getElementById('no-buwana-email');
            if (noBuwanaEmail) {
                console.log("Displaying the 'email not found' error.");
                noBuwanaEmail.style.display = 'block';
            }
        }, 100);
    }
};

</script>


</body>
</html>
