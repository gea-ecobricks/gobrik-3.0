<?php
// Turn on or off error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Start the session before any output
session_start();

// Check if user is logged in and session active
if (isset($_SESSION['buwana_id'])) {
    header('Location: dashboard.php');
    exit();
}

// Generate CSRF token if not already set
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// VERSION Set page variables
$lang = basename(dirname($_SERVER['SCRIPT_NAME']));
$version = '0.699';
$page = 'login';
$lastModified = date("Y-m-d\TH:i:s\Z", filemtime(__FILE__));

// Get the status, id (buwana_id), code, and key (credential_key) from URL
$status = isset($_GET['status']) ? filter_var($_GET['status'], FILTER_SANITIZE_STRING) : '';
$buwana_id = isset($_GET['id']) ? filter_var($_GET['id'], FILTER_SANITIZE_NUMBER_INT) : '';
$code = isset($_GET['code']) ? filter_var($_GET['code'], FILTER_SANITIZE_STRING) : ''; // Extract code from the URL
$credential_key = ''; // Initialize $credential_key as empty
$first_name = '';  // Initialize the first_name variable

// Check if buwana_id is available and valid to fetch corresponding email and first_name from users_tb
if (!empty($buwana_id)) {
    require_once '../buwanaconn_env.php'; //sets up buwana_conn database connection

    // Prepare the query to fetch the email and first_name from users_tb
    $sql = "SELECT email, first_name FROM users_tb WHERE buwana_id = ?";

    if ($stmt = $buwana_conn->prepare($sql)) {
        // Bind the buwana_id parameter
        $stmt->bind_param("i", $buwana_id);

        // Execute the statement
        $stmt->execute();

        // Bind the result
        $stmt->bind_result($fetched_email, $fetched_first_name);

        // Fetch the result and overwrite the email and first_name if found
        if ($stmt->fetch()) {
            $credential_key = $fetched_email;  // Store the fetched email
            $first_name = $fetched_first_name;  // Store the fetched first_name
        }

        // Close the statement
        $stmt->close();
    }

    // Close the database connection
    $buwana_conn->close();
}

// Echo the HTML structure
echo '<!DOCTYPE html>
<html lang="' . htmlspecialchars($lang, ENT_QUOTES, 'UTF-8') . '">
<head>
<meta charset="UTF-8">
<title>Login</title>
';

// JavaScript variables for dynamic use
echo '<script>';
echo 'const status = "' . addslashes($status) . '";';
echo 'const lang = "' . addslashes($lang) . '";';
echo 'const firstName = "' . addslashes($first_name) . '";';
echo 'const buwanaId = "' . addslashes($buwana_id) . '";';
echo 'const code = "' . addslashes($code) . '";';
echo '</script>';
?>





<!-- Include necessary scripts and styles -->
<?php require_once ("../includes/login-inc.php");?>

<div class="splash-title-block"></div>
<div id="splash-bar"></div>

<!-- PAGE CONTENT -->
<div id="top-page-image" class="earth-community top-page-image"></div>

<div id="form-submission-box" class="landing-page-form">
    <div class="form-container">

     <!-- This is the welcome header and subtitle that are custom generated by the javascript depending on the status returned in the url

     Update to include translations and variations of the H4 tag-->

    <div style="text-align:center;width:100%;margin:auto;" >
        <div id="status-message">Login to GoBrik</div>
        <div id="sub-status-message">Please signin with your account credentials.</div>
    </div>

   <!-- Form starts here-->
<form id="login" method="post" action="login_process.php">
    <input type="hidden" name="csrf_token" value="<?php echo htmlspecialchars($_SESSION['csrf_token']); ?>">

    <div class="form-item">
        <div class="input-wrapper" style="position: relative;">
            <input type="text" id="credential_key" name="credential_key" required placeholder="Your e-mail..." value="<?php echo htmlspecialchars($credential_key); ?>">
            <span class="toggle-select-key" style="cursor: pointer; position: absolute; right: 10px; top: 50%; transform: translateY(-50%);">ðŸ”‘</span>
            <div id="dropdown-menu" style="display: none; position: absolute; right: 10px; top: 100%; z-index: 1000; background: white; border: 1px solid #ccc; width: 150px; text-align: left;">
                <div class="dropdown-item" value="Your email...">E-mail</div>
                <div class="dropdown-item disabled" style="opacity: 0.5;">SMS</div>
                <div class="dropdown-item disabled" style="opacity: 0.5;">Phone</div>
                <div class="dropdown-item disabled" style="opacity: 0.5;">GEA Peer</div>
            </div>
        </div>
        <div id="no-buwana-email" data-lang-id="001-cant-find" class="form-field-error" style="display:none;margin-top: 0px;margin-bottom:-15px;">ðŸ¤” We can't find this credential in the database.</div>
    </div>

    <div class="form-item" id="password-form" style="height:80px;">
        <div class="password-wrapper" style="position: relative;">
            <div data-lang-id="005-password-field-placeholder">
                <input type="password" id="password" name="password" placeholder="Your password..." required>
            </div>
            <span toggle="#password" class="toggle-password" style="cursor: pointer; position: absolute; right: 10px; top: 50%; transform: translateY(-50%);">ðŸ”’</span>
        </div>
        <div id="password-error" data-lang-id="002-password-is-wrong" class="form-field-error" style="display:none;margin-top: 0px;margin-bottom:-15px;">ðŸ‘‰ Password is wrong.</div>

        <p class="form-caption" data-lang-id="003-forgot-your-password">Forgot your password? <a href="#" onclick="showPasswordReset('reset')" class="underline-link" datala-lang-id="000-reset-it">Reset it.</a></p>
    </div>

    <div class="form-item" id="code-form" style="text-align:center;height:80px;">

        <div class="code-wrapper" style="position: relative;">
            <input type="text" maxlength="1" class="code-box" placeholder="-">
            <input type="text" maxlength="1" class="code-box" placeholder="-">
            <input type="text" maxlength="1" class="code-box" placeholder="-">
            <input type="text" maxlength="1" class="code-box" placeholder="-">
            <input type="text" maxlength="1" class="code-box" placeholder="-">
        </div>
    <p id="code-status" class="form-caption" data-lang-id="003-code-status" style="margin-top:5px;">A code will be sent to your email.</p>

    </div>

    <div style="text-align:center;width:100%;margin:auto;margin-top:30px;" id="login-buttons">
        <div class="toggle-container">
            <input type="radio" id="password" name="toggle" value="password" checked>
            <input type="radio" id="code" name="toggle" value="code">
            <div class="toggle-button password">ðŸ”’</div>
            <div class="toggle-button code">ðŸ“±</div>
            <div class="login-slider"></div>
            <input type="submit" id="submit-password-button" value="Login" class="login-button-75">
            <input type="button" id="send-code-button" value="ðŸ“¨ Send Code" class="code-button-75" style="display:none;">

        </div>
            <div id="code-error" data-lang-id="002-password-is-wrong" class="form-field-error" style="display:none;margin-top: 5px;margin-bottom:-15px;">ðŸ‘‰ Code is wrong.</div>
    </div>
</form>



    </div>

</div>
    <div style="text-align:center;width:100%;margin:auto;margin-top:30px;margin-bottom:50px;">
        <p style="font-size:medium;" data-lang-id="000-no-account-yet">Don't have an account yet? <a href="signup.php">Signup!</a></p>
    </div>
</div>

</div>

<!-- FOOTER STARTS HERE -->
<?php require_once ("../footer-2024.php");?>


<script>
/* Code entry and processing for 2FA */

document.addEventListener('DOMContentLoaded', function () {
    const codeInputs = document.querySelectorAll('.code-box');
    const sendCodeButton = document.getElementById('send-code-button');
    const codeErrorDiv = document.getElementById('code-error');
    const codeStatusDiv = document.getElementById('code-status');
    const credentialKeyInput = document.getElementById('credential_key');

    // Function to move focus to the next input
    function moveToNextInput(currentInput, nextInput) {
        if (nextInput) {
            nextInput.focus();
        }
    }

    // Setup each input box
    codeInputs.forEach((input, index) => {
        // Handle paste event separately
        input.addEventListener('paste', (e) => handlePaste(e));

        // Handle input event for typing data
        input.addEventListener('input', () => handleInput(input, index));

        // Handle backspace for empty fields to jump back to the previous field
        input.addEventListener('keydown', (e) => handleBackspace(e, input, index));
    });

    // Function to handle paste event
    function handlePaste(e) {
        const pastedData = e.clipboardData.getData('text').slice(0, codeInputs.length);
        [...pastedData].forEach((char, i) => codeInputs[i].value = char);
        codeInputs[Math.min(pastedData.length, codeInputs.length) - 1].focus();
        validateCode();
        e.preventDefault();
    }

    // Function to handle input event for typing data
    function handleInput(input, index) {
        if (input.value.length === 1 && index < codeInputs.length - 1) {
            moveToNextInput(input, codeInputs[index + 1]);
        }
        if ([...codeInputs].every(input => input.value.length === 1)) {
            validateCode();
        }
    }

    // Function to handle backspace for empty fields to jump back to the previous field
    function handleBackspace(e, input, index) {
        if (e.key === "Backspace" && input.value === '' && index > 0) {
            codeInputs[index - 1].focus();
        }
    }

    // Function to validate the code if all fields are filled
    function validateCode() {
        const fullCode = [...codeInputs].map(input => input.value.trim()).join('');
        if (fullCode.length === codeInputs.length) {
            console.log("Code to validate: ", fullCode);
            ajaxValidateCode(fullCode);
        }
    }

    // Function to handle AJAX call to validate the code
    function ajaxValidateCode(code) {
        fetch('code_login_process.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `code=${code}&credential_key=${credentialKeyInput.value}`
        })
        .then(response => response.json())
        .then(data => handleAjaxResponse(data))
        .catch(error => console.error('Error:', error));
    }

    // Function to handle AJAX response
    function handleAjaxResponse(data) {
        if (data.status === 'invalid') {
            showErrorMessage("ðŸ‘‰ Code is wrong.", 'Incorrect Code', 'red');
            shakeElement(document.getElementById('code-form'));
            clearCodeInputs();
        } else if (data.status === 'success') {
            showSuccessMessage('Code correct! Logging in...');
            window.location.href = data.redirect;
        }
    }

    // Function to show error messages
    function showErrorMessage(errorText, statusText, color) {
        codeErrorDiv.textContent = errorText;
        codeStatusDiv.textContent = statusText;
        codeStatusDiv.style.color = color;
    }

    // Function to show success messages
    function showSuccessMessage(text) {
        codeStatusDiv.textContent = text;
        codeStatusDiv.style.color = 'green';
    }

    // Function to clear all code inputs
    function clearCodeInputs() {
        codeInputs.forEach(input => input.value = '');
        codeInputs[0].focus();
    }

    // Function to handle the shaking animation
    function shakeElement(element) {
        element.classList.add('shake');
        setTimeout(() => element.classList.remove('shake'), 400);
    }

    // Function to handle the sending of the code
    function submitCodeForm(event) {
        event.preventDefault();
        setButtonState("Sending...", true);
        fetch('code_process.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ 'credential_key': credentialKeyInput.value })
        })
        .then(response => response.text())
        .then(text => {
            try {
                const data = JSON.parse(text);
                handleCodeResponse(data);
            } catch (error) {
                showAlertAndResetButton('An unexpected error occurred.');
            }
        })
        .catch(() => showAlertAndResetButton('An unexpected error occurred.'));
    }

    // Function to handle the response after code submission
    function handleCodeResponse(data) {
        codeErrorDiv.textContent = '';
        codeErrorDiv.style.display = 'none';

        switch (data.status) {
            case 'empty_fields':
                alert('Please enter your credential key.');
                resetSendCodeButton();
                break;
            case 'activation_required':
                window.location.href = data.redirect || `activate.php?id=${data.id}`;
                break;
            case 'not_found':
            case 'crednotfound':
                showErrorAndResetButton('Sorry, no matching email was found.');
                break;
            case 'credfound':
                handleSuccessfulCodeSend();
                break;
            default:
                showAlertAndResetButton('An error occurred. Please try again later.');
                break;
        }
    }

    // Function to handle successful code send
    function handleSuccessfulCodeSend() {
        sendCodeButton.value = "âœ… Code sent!";
        codeStatusDiv.textContent = 'Code is sent! Check your email.';
        codeStatusDiv.style.display = 'block';
        codeStatusDiv.style.color = '';
        resendCountDown(60, codeStatusDiv, sendCodeButton);
        enableCodeEntry();
    }

    // Function to enable typing in code fields
    function enableCodeEntry() {
        codeInputs.forEach(codeBox => {
            codeBox.style.pointerEvents = 'auto';
            codeBox.style.cursor = 'text';
            codeBox.style.opacity = '1';
        });
    }

    // Function to reset the send code button to its original state
    function resetSendCodeButton() {
        setButtonState("ðŸ“¨ Send Code Again", false);
    }

    // Function to set button state
    function setButtonState(text, isDisabled) {
        sendCodeButton.value = text;
        sendCodeButton.disabled = isDisabled;
        sendCodeButton.style.pointerEvents = isDisabled ? 'none' : 'auto';
        sendCodeButton.style.cursor = isDisabled ? 'auto' : 'pointer';
    }

    // Function to handle alert and reset button
    function showAlertAndResetButton(message) {
        alert(message);
        resetSendCodeButton();
    }

    // Function to show error and reset button
    function showErrorAndResetButton(message) {
        codeErrorDiv.textContent = message;
        codeErrorDiv.style.display = 'block';
        resetSendCodeButton();
    }

    // Function for resend countdown
    function resendCountDown(seconds, displayElement, sendCodeButton) {
        let remaining = seconds;
        const interval = setInterval(() => {
            displayElement.style.color = '';
            displayElement.textContent = `Resend code in ${remaining--} seconds.`;
            if (remaining < 0) {
                clearInterval(interval);
                displayElement.textContent = 'You can now resend the code.';
                resetSendCodeButton();
            }
        }, 1000);
    }

    // Attach submit handler to the send code button
    sendCodeButton.addEventListener('click', submitCodeForm);

});





/* Toggle Login Button */

document.addEventListener('DOMContentLoaded', function () {
    const passwordForm = document.getElementById('password-form');
    const codeForm = document.getElementById('code-form');
    const passwordToggle = document.getElementById('password');
    const codeToggle = document.getElementById('code');
    const submitPasswordButton = document.getElementById('submit-password-button');
    const sendCodeButton = document.getElementById('send-code-button');

    // Function to update the form visibility and toggle required attribute based on toggle state
    function updateFormVisibility() {
        if (passwordToggle.checked) {
            toggleVisibility(codeForm, passwordForm);
        } else if (codeToggle.checked) {
            toggleVisibility(passwordForm, codeForm);
        }
    }

    // Helper function to handle toggling visibility with fade effect
    function toggleVisibility(hideElement, showElement) {
        hideElement.style.opacity = '0';
        setTimeout(() => {
            hideElement.style.display = 'none';
            showElement.style.display = 'block';
            setTimeout(() => {
                showElement.style.opacity = '1';
            }, 10);
        }, 300); // Time for the fade-out transition
    }

    // Function to update the visibility of the submit buttons
    function updateButtonVisibility() {
        if (passwordToggle.checked) {
            toggleButtonVisibility(sendCodeButton, submitPasswordButton);
        } else {
            toggleButtonVisibility(submitPasswordButton, sendCodeButton);
        }
    }

    // Helper function to handle toggling button visibility with delay
    function toggleButtonVisibility(hideButton, showButton) {
        hideButton.style.display = 'none';
        setTimeout(() => {
            showButton.style.display = 'block';
        }, 600); // Delay for transition effect
    }

    // Event listener for toggle button clicks
    document.querySelectorAll('.toggle-button').forEach(button => {
        button.addEventListener('click', () => handleToggle(button));
    });

    // Function to handle toggle logic
    function handleToggle(button) {
        if (button.classList.contains('password')) {
            passwordToggle.checked = true;
            codeToggle.checked = false;
        } else {
            codeToggle.checked = true;
            passwordToggle.checked = false;
        }

        // Update form action, visibility, and buttons based on the selected toggle
        updateFormAction();
        updateFormVisibility();
        updateButtonVisibility();
    }

    function updateFormAction() {
        const form = document.getElementById('login');
        const passwordField = document.getElementById('password');

        if (codeToggle.checked) {
            passwordField.removeAttribute('required');
            form.action = 'code_process.php';
            console.log("Code is checked.");
        } else if (passwordToggle.checked) {
            passwordField.setAttribute('required', 'required');
            form.action = 'login_process.php';
            console.log("Password is checked.");
        }
    }
});

/* Globalized Functions */

document.addEventListener("DOMContentLoaded", function () {
    // Function to extract the query parameters from the URL
    function getQueryParam(param) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
    }

    // Function to get status messages
    function getStatusMessages(status, lang, firstName = '') {
        const messages = {
            logout: {
                en: {
                    main: "You're logged out.",
                    sub: `When you're ready${firstName ? ' ' + firstName : ''}, login again with your account credentials.`
                },
                // Other language messages...
            },
            firsttime: {
                en: {
                    main: "Your Buwana Account is Created! ðŸŽ‰",
                    sub: `Now${firstName ? ' ' + firstName : ''}, please login again with your new account credentials.`
                },
                // Other language messages...
            },
            default: {
                en: {
                    main: "Welcome back!",
                    sub: `Please login again with your account credentials.`
                },
                // Other language messages...
            }
        };

        const selectedMessages = messages[status] && messages[status][lang]
            ? messages[status][lang]
            : messages.default[lang] || messages.default.en;

        return {
            main: selectedMessages.main,
            sub: selectedMessages.sub
        };
    }

    // Consolidated function to handle error responses and show the appropriate error div
    function handleErrorResponse(errorType) {
        document.getElementById('password-error').style.display = 'none';
        document.getElementById('no-buwana-email').style.display = 'none';

        if (errorType === 'invalid_password') {
            document.getElementById('password-error').style.display = 'block';
        } else if (errorType === 'invalid_user' || errorType === 'invalid_credential') {
            document.getElementById('no-buwana-email').style.display = 'block';
        }
    }

    // Fetch and display the status message based on the status and language
    const status = getQueryParam('status') || '';
    const lang = document.documentElement.lang || 'en';
    const firstName = getQueryParam('firstName') || '';
    const credentialKey = getQueryParam('key');
    const code = getQueryParam('code');
    const buwanaId = getQueryParam('id');

    const { main, sub } = getStatusMessages(status, lang, firstName);
    document.getElementById('status-message').textContent = main;
    document.getElementById('sub-status-message').textContent = sub;

    if (credentialKey) {
        document.getElementById('credential_key').value = credentialKey;
    }

    // Handle form submission validation
    document.getElementById('login').addEventListener('submit', function (event) {
        var credentialValue = document.getElementById('credential_key').value;
        var password = document.getElementById('password').value;

        if (credentialValue === '' || password === '') {
            event.preventDefault();
            handleErrorResponse('invalid_password');
        }
    });

    const errorType = status;
    if (errorType) {
        handleErrorResponse(errorType);
    }

    // Automatic code processing if code and buwana_id are present in the URL
    if (code && buwanaId) {
        document.getElementById('status-message').textContent = "Checking your code...";
        document.getElementById('sub-status-message').textContent = "One moment please.";

        setTimeout(() => {
            document.getElementById('code').checked = true;
            updateFormVisibility();
            updateButtonVisibility();

            const sendCodeButton = document.getElementById('send-code-button');
            const codeStatusDiv = document.getElementById('code-status');
            sendCodeButton.value = "Processing...";
            sendCodeButton.disabled = true;
            sendCodeButton.style.pointerEvents = 'none';
            sendCodeButton.style.cursor = 'auto';
            codeStatusDiv.textContent = "Verifying your login code...";

            setTimeout(() => {
                const codeInputs = document.querySelectorAll('.code-box');
                code.split('').forEach((digit, index) => {
                    if (index < codeInputs.length) {
                        setTimeout(() => {
                            codeInputs[index].value = digit;
                            const event = new Event('input', { bubbles: true });
                            codeInputs[index].dispatchEvent(event);

                            if (index === codeInputs.length - 1) {
                                updateFormAction();
                            }
                        }, index * 200);
                    }
                });
            }, 300);
        }, 300);
    }
});

/* Trigger the credentials menu from the key symbol in the credentials field. */

document.addEventListener("DOMContentLoaded", function () {
    const toggleSelectIcon = document.querySelector('.toggle-select-key');
    const dropdownMenu = document.getElementById('dropdown-menu');
    const credentialKeyInput = document.getElementById('credential_key');
    const dropdownItems = dropdownMenu.querySelectorAll('.dropdown-item');

    toggleSelectIcon.addEventListener('click', function () {
        dropdownMenu.style.display = dropdownMenu.style.display === 'none' ? 'block' : 'none';
    });

    document.addEventListener('click', function (e) {
        if (!toggleSelectIcon.contains(e.target) && !dropdownMenu.contains(e.target)) {
            dropdownMenu.style.display = 'none';
        }
    });

    dropdownItems.forEach(function (item) {
        item.addEventListener('click', function () {
            if (!item.classList.contains('disabled')) {
                credentialKeyInput.value = item.textContent.trim();
                dropdownMenu.style.display = 'none';
            }
        });
    });
});

/* PASSWORD RESET MODAL */

function showPasswordReset(type, lang = 'en', email = '') {
    const modal = document.getElementById('form-modal-message');
    const photobox = document.getElementById('modal-photo-box');
    const messageContainer = modal.querySelector('.modal-message');
    let content = '';
    photobox.style.display = 'none';

    switch (type) {
        case 'reset':
            let title, promptText, buttonText, errorText;

            switch (lang) {
                case 'fr':
                    title = "RÃ©initialiser le mot de passe";
                    promptText = "Entrez votre email pour rÃ©initialiser votre mot de passeÂ :";
                    buttonText = "RÃ©initialiser le mot de passe";
                    errorText = "ðŸ¤” Hmmm... nous ne trouvons aucun compte utilisant cet email !";
                    break;
                // Other languages...
                default: // 'en'
                    title = "Reset Password";
                    promptText = "Enter your email to reset your password:";
                    buttonText = "Reset Password";
                    errorText = "ðŸ¤” Hmmm... we can't find an account that uses this email!";
                    break;
            }

            content = `
                <div style="text-align:center;width:100%;margin:auto;margin-top:10px;margin-bottom:10px;">
                    <h1>ðŸ”“</h1>
                </div>
                <div class="preview-title">${title}</div>
                <form id="resetPasswordForm" action="reset_password.php" method="POST">
                    <div class="preview-text" style="font-size:medium;">${promptText}</div>
                    <input type="email" name="email" required value="${email}">
                    <div style="text-align:center;width:100%;margin:auto;margin-top:10px;margin-bottom:10px;">
                        <div id="no-buwana-email" class="form-warning" style="display:none;margin-top:5px;margin-bottom:5px;" data-lang-id="010-no-buwana-email">${errorText}</div>
                        <button type="submit" class="submit-button enabled">${buttonText}</button>
                    </div>
                </form>
            `;
            break;

        default:
            content = '<p>Invalid term selected.</p>';
    }

    messageContainer.innerHTML = content;
    modal.style.display = 'flex';
    document.getElementById('page-content').classList.add('blurred');
    document.getElementById('footer-full').classList.add('blurred');
    document.body.classList.add('modal-open');
}


/* Password Reset Modal and URL Handling */

window.onload = function() {
    const urlParams = new URLSearchParams(window.location.search);

    // Check if the 'email_not_found' parameter exists in the URL
    if (urlParams.has('email_not_found')) {
        const email = urlParams.get('email') || '';
        const lang = '<?php echo $lang; ?>'; // Ensure this is echoed from your PHP

        // Show the reset modal with the pre-filled email and appropriate language
        showPasswordReset('reset', lang, email);

        // Wait for the modal to load, then display the "email not found" error message
        setTimeout(() => {
            const noBuwanaEmail = document.getElementById('no-buwana-email');
            if (noBuwanaEmail) {
                console.log("Displaying the 'email not found' error.");
                noBuwanaEmail.style.display = 'block';
            }
        }, 100);
    }
};

/* Function to Enable Typing in the Code Boxes */

function enableCodeEntry() {
    const codeBoxes = document.querySelectorAll('.code-box');

    codeBoxes.forEach((box, index) => {
        box.classList.add('enabled'); // Enable typing by adding the 'enabled' class

        box.addEventListener('input', function() {
            if (box.value.length === 1 && index < codeBoxes.length - 1) {
                codeBoxes[index + 1].focus(); // Jump to the next box
            }
        });
    });

    // Set focus on the first box
    codeBoxes[0].focus();
}

/* General Utility Functions */

// Function to reset error messages and buttons
function resetInterfaceElements() {
    document.getElementById('status-message').textContent = '';
    document.getElementById('sub-status-message').textContent = '';
    resetSendCodeButton();
}

/* Event Listeners for Code Processing */

// Attach the form submit handler to the 'send code' button
document.getElementById('send-code-button').addEventListener('click', submitCodeForm);

/* Further Event Handlers for Improved UX */

// Event listeners for various inputs and buttons to enhance user experience
document.querySelectorAll('.toggle-button').forEach(button => {
    button.addEventListener('click', () => handleToggle(button));
});

/* Modal and UI Management Functions */

// Central function to manage the display and behavior of modal and other UI elements
function manageUIModal() {
    const toggleSelectIcon = document.querySelector('.toggle-select-key');
    const dropdownMenu = document.getElementById('dropdown-menu');
    const credentialKeyInput = document.getElementById('credential_key');
    const dropdownItems = dropdownMenu.querySelectorAll('.dropdown-item');

    toggleSelectIcon.addEventListener('click', () => {
        dropdownMenu.style.display = dropdownMenu.style.display === 'none' ? 'block' : 'none';
    });

    document.addEventListener('click', (e) => {
        if (!toggleSelectIcon.contains(e.target) && !dropdownMenu.contains(e.target)) {
            dropdownMenu.style.display = 'none';
        }
    });

    dropdownItems.forEach(item => {
        item.addEventListener('click', () => {
            if (!item.classList.contains('disabled')) {
                credentialKeyInput.value = item.textContent.trim();
                dropdownMenu.style.display = 'none';
            }
        });
    });
}

// Invoke modal management function
manageUIModal();

/* Password Reset Functions */

// Handle password reset modal display based on user actions or URL parameters
function handlePasswordReset() {
    const resetType = getQueryParam('reset_type'); // Assuming a query param for reset type
    const email = getQueryParam('email'); // Fetch email if provided in URL
    if (resetType && email) {
        showPasswordReset(resetType, lang, email);
    }
}

handlePasswordReset();





</script>



</body>
</html>
